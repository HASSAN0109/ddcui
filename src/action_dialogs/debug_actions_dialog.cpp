// debug_actions_dialog.cpp

// Copyright (C) 2020 Sanford Rockowitz <rockowitz@minsoft.com>
// SPDX-License-Identifier: GPL-2.0-or-later

#include <assert.h>
#include <QtCore/QDebug>

#include "base/core.h"
#include "help/help_dialog.h"

#include "action_dialogs/debug_actions_dialog.h"
#include "ui_debug_actions_dialog.h"    // generated by UIC from debug_actions_dialog.ui


DebugActionsDialog::DebugActionsDialog(QWidget *parent)
    :  QDialog(parent)
    ,  _ui(new Ui::DebugActionsDialog)
{
    bool debug = true;
    _cls = metaObject()->className();
    TRACECF(debug, "Constructor starting");
    _ui->setupUi(this);
    setWindowTitle("ddcui - Debugging Actions");
    QPushButton* okButton = _ui->actionButtonBox->button(QDialogButtonBox::Ok);
    okButton->setText("Close");

    connect(_ui->resetStats_pushButton, &QPushButton::clicked,
            this,                    &DebugActionsDialog::for_actionResetStatsButton_clicked);
    connect(_ui->all_pushButton,     &QPushButton::clicked,
            this,                    &DebugActionsDialog::for_actionAllStatsButton_clicked);
    connect(_ui->calls_pushButton,   &QPushButton::clicked,
            this,                    &DebugActionsDialog::for_actionCallsStatsButton_clicked);
    connect(_ui->tries_pushButton,   &QPushButton::clicked,
            this,                    &DebugActionsDialog::for_actionTriesStatsButton_clicked);
    connect(_ui->errors_pushButton,  &QPushButton::clicked,
            this,                    &DebugActionsDialog::for_actionErrorsStatsButton_clicked);
    connect(_ui->elapsed_pushButton, &QPushButton::clicked,
            this,                    &DebugActionsDialog::for_actionElapsedStatsButton_clicked);

    TRACECF(debug, "Constructor done. _cls = %s", _cls);
}


DebugActionsDialog::~DebugActionsDialog()
{
    delete _ui;
}


void DebugActionsDialog::on_actionButtonBox_accepted()
{
    bool debugFunc = false;


    // no, automatically emitted when dialog accepted, by accept() or done()
    // emit userInterfaceDialog_accepted(_state);  // probably not needed

    TRACECF(debugFunc, "Before calling accept()");
    accept();  // causes accepted() to be emitted
}


void DebugActionsDialog::on_actionButtonBox_helpRequested()
{
    // TRACE();
    QString fn(":/docs/uioptions.html");   // -> debug_actions.html
    QFile f(fn);
    f.open(QFile::ReadOnly | QFile::Text);
    QTextStream in(&f);

    QString htmlText = in.readAll();

    // qDebug() << htmlText;

    // doesn't show dialog box
    // HelpDialog2("ddcui Help - Other Options", htmlText, this);

    HelpDialog2* hd = new HelpDialog2(this);
    hd->setText(htmlText);
    hd->setWindowTitle("ddcui Help - Debugging Actions");
    hd->show();
}


void DebugActionsDialog::for_actionAllStatsButton_clicked(bool onoff) {
   bool debug = true;
   TRACECF(debug, "Executing");
   emit reportStats_triggered(DDCA_STATS_ALL);
}

void DebugActionsDialog::for_actionCallsStatsButton_clicked(bool onoff) {
   bool debug = true;
   TRACECF(debug, "Executing");
   emit reportStats_triggered(DDCA_STATS_CALLS);
}

void DebugActionsDialog::for_actionErrorsStatsButton_clicked(bool onoff) {
   bool debug = true;
   TRACECF(debug, "Executing");
   emit reportStats_triggered(DDCA_STATS_ERRORS);
}

void DebugActionsDialog::for_actionTriesStatsButton_clicked(bool onoff) {
   bool debug = true;
   TRACECF(debug, "Executing");
   emit reportStats_triggered(DDCA_STATS_TRIES);
}

void DebugActionsDialog::for_actionElapsedStatsButton_clicked(bool onoff) {
   bool debug = true;
   printf("_cls = %s\n", _cls);
   printf("Z ");
   fflush(stdout);
   TRACECF(debug, "Executing");
   emit reportStats_triggered(DDCA_STATS_ELAPSED);
}

void DebugActionsDialog::for_actionResetStatsButton_clicked(bool onoff)
{
   bool debug = true;
   TRACECF(debug, "Executing");
   emit resetStats_triggered();
}

